<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bruno57.Domain.Foundations</name>
    </assembly>
    <members>
        <member name="T:Bruno57.Domain.Foundations.Attributes.AggregateRootAttribute">
            <summary>
            Aggregate Root attribute. Use this to tag/mark your root entities when you want to apply constraints.
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Foundations.Attributes.AggregateRootAttribute.#ctor(System.String)">
            <summary>
            Attribute constructor with optional Entity Name parameter.
            Use the optional parameter for more granular tagging/marking
            </summary>
            <param name="entityName"></param>
        </member>
        <member name="T:Bruno57.Domain.Foundations.DomainEventMechanism.DomainEventPublisher">
            <summary>
            A simple implementation to encapsulate the publishing of the events
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Foundations.DomainEventMechanism.DomainEventPublisher.PublishDomainEventsAsync(System.Collections.Generic.IEnumerable{Bruno57.Domain.Foundations.DomainEventMechanism.DomainNotificationMessageBase},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:Bruno57.Domain.Foundations.DomainEventMechanism.DomainNotificationMessageBase">
            <summary>
            Base notification message.
            </summary>
        </member>
        <member name="T:Bruno57.Domain.Foundations.DomainEventMechanism.IDomainEventPublisher">
            <summary>
            An interface for publishing events
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Foundations.DomainEventMechanism.IDomainEventPublisher.PublishDomainEventsAsync(System.Collections.Generic.IEnumerable{Bruno57.Domain.Foundations.DomainEventMechanism.DomainNotificationMessageBase},System.Threading.CancellationToken)">
            <summary>
            Publish events
            </summary>
            <param name="domainEvents">List of events</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:Bruno57.Domain.Foundations.EntityBase">
            <summary>
            Abstract entity base.
            </summary>
        </member>
        <member name="T:Bruno57.Domain.Foundations.Extensions.GuardClauseExtension">
            <summary>
            Guard clause extension.
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Foundations.Extensions.GuardClauseExtension.CheckForNull``1(``0,System.Func{System.Exception},System.String)">
            <summary>
            An extension method to guard against null for class objects.
            </summary>
            <typeparam name="T">The object the null check is done against.</typeparam>
            <param name="input">The generic object that is being checked for its state.</param>
            <param name="paramName"></param>
            <param name="customException">Optional. A function to create custom exception.</param>
            <returns><paramref name="input" /> if the value is not null.</returns>
            <example>
            <code>
            someObject.CheckForNull();
            someObject.CheckForNull(() => { throw new MyCustomException("custom exception message"); });
            </code>
            </example>
        </member>
        <member name="T:Bruno57.Domain.Foundations.ValueObject">
            <summary>
            Value Object logic base class.
            <para>An object that represents a descriptive aspect of the domain
            with no conceptual identity is called a Value Object
            </para>
            </summary>
        </member>
        <member name="M:Bruno57.Domain.Foundations.ValueObject.GetEqualityComponents">
            <summary>
            A necessary addition to the Value Object base to allow for including and excluding fields from the comparison.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bruno57.Domain.Foundations.ValueObject.Equals(System.Object)">
            <summary>
            To implement equality instead of identity, which is the default.
            Why did I override this? By default, DotNet uses Reference Equality when comparing objects.
            However, for Value Objects, two instances should be considered equal if all of their properties/attributes are equal,
            and not just because they point to the same memory location.
            </summary>
            <param name="obj"></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Bruno57.Domain.Foundations.ValueObject.GetHashCode">
            <summary>
            Objects that are considered equal, for Value Objects, they must also have the same hash code.
            Hash codes are used in collections.
            I've overridden GetHashCode to generate new hash code based on the value of the attributes (obj).
            </summary>
            <returns>int</returns>
        </member>
        <member name="M:Bruno57.Domain.Foundations.ValueObject.op_Equality(Bruno57.Domain.Foundations.ValueObject,Bruno57.Domain.Foundations.ValueObject)">
            <summary>
            The == operator to make it possible to use it when comparing two objects
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Bruno57.Domain.Foundations.ValueObject.op_Inequality(Bruno57.Domain.Foundations.ValueObject,Bruno57.Domain.Foundations.ValueObject)">
            <summary>
            The != operator to make it possible to use it when comparing two objects
            </summary>
            <param name="one"></param>
            <param name="two"></param>
            <returns>Boolean</returns>
        </member>
    </members>
</doc>
